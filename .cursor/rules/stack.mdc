---
description: General best practices to apply in the project
globs: **/*.*
---
# Mandatory Best Practices for Electron Development with Vite, TypeScript, and React 18

This document outlines the *required* best practices for building Electron applications using Vite, TypeScript, and React 18. Deviations from these standards are strongly discouraged and require explicit justification. The focus is on a fast, secure, maintainable, and highly performant development workflow.

## Core Principles (Non-Negotiable)

*   **Speed and Efficiency:** Vite's fast build times and Hot Module Replacement (HMR) are *required*.
*   **Absolute Type Safety:** TypeScript is mandatory for *all* code (main, renderer, preload, shared).  `any` is strictly forbidden. Use specific types or `unknown` with appropriate type narrowing.  Exceptions require explicit justification in comments *and* approval during code review.
*   **Strict Modularity:** A rigid separation of concerns between the main process, renderer processes, and preload scripts is enforced.  Violations will be flagged during code review.
*   **Uncompromising Security:** Electron's security recommendations are not optional. Context isolation and sandboxing are mandatory.
*, weistent project structure are paramount. Code reviews are mandatory, and code quality will be strictly enforced.

## Project Setup and Structure (Inflexible)

1.  **Project Initiayour project. Manual setup is forbidden.
    *   `package.json`:
        *   Dependencies: Electron, Vite, TypeScript, React 18, etc.
        *   Scripts: `dev`, `build`, `package`, `make`.
        *   `main`: Points to the compiled main process entry point (e.g., `dist/main.js`).

2.  **Directory Structure (Mandatory):**

    ```
    ├── dist/          (Compiled output - automatically generated)
    ├── src/
    │   ├── main/      (Main process code)
    │   │   ├── index.ts     (Main process entry point)
    │   │   ├── ipc/         (IPC handlers, strictly organized)
    │   │   │   ├── index.ts (Main IPC handler file - aggregation point)
    │   │   │   └── modules/ (Specific IPC modules, one per feature)
    │   │   │       └── serverManagement.ts (Example)
    │   │   └── preload.ts  (Preload script - *only* expose necessary APIs)
    │   ├── renderer/    (Renderer process code - your React 18 application)
    │   │   ├── index.html   (Entry HTML)
    │   │   ├── index.tsx    (Renderer entry point - use createRoot)
    │   │   ├── App.tsx      (Root component)
    │   │   ├── components/  (Reusable UI components - PascalCase)
    │   │   │   └── [ComponentName]/
    │   │   │       ├── [ComponentName].tsx
    │   │   │       ├── [ComponentName].test.tsx  (Mandatory tests)
    │   │   │       ├── [ComponentName].module.css (Scoped styles)
    │   │   │       └── index.ts  (Component export)
    │   │   ├── hooks/       (Custom React hooks - use prefix)
    │   │   ├── services/    (API interaction, data fetching - separate logic)
    │   │   ├── store/       (State management - Zustand or Redux Toolkit)
    │   │   ├── types/       (TypeScript types specific to the renderer)
    │   │   └── utils/       (Utility functions - pure functions only)
    │   └── shared/      (Code shared between main and renderer - MINIMIZE)
    │       └── types.ts   (Shared type definitions)
    ├── public/        (Static assets - AVOID IF POSSIBLE. Bundle instead.)
    ├── package.json
    ├── tsconfig.json    (Base TypeScript configuration - strict mode)
    ├── tsconfig-electron.json  (Main process - extends base, "module": "CommonJS")
    └── vite.config.ts   (Vite configuration - renderer and main)
    ```

    *   **`src/main`:** Electron main process. IPC handlers *must* be modularized within `ipc/modules`.
    *   **`src/renderer`:** React 18 application. Strict component-based structure.  Components *must* have tests and scoped styles.
    *   **`src/shared`:** *Minimize* shared code. Primarily for type definitions.  Avoid logic.
    *   **`dist`:**  Autom** Avoid using `public`. Prefer bundling assets.

3.  **TypeScript Configuration:**

    *   Separate `tsconfig.json` (base) and `tsconfig-electron.json` (main process) are *mandatory*.
    *   `tsconfig-electron.json`: `"module": "CommonJS"`, `"outDir": "dist"`, extends `tsconfig.json`.
    *   *Strict* TypeScript rules: `noImplicitAny`, `strictNulltly Enforced)

1.  **HMR and Hot Reloading:**

    *   Vite's HMRuired*.
    *   `electron-vite`'s built-in hot reloading for the main process is *required*.
    *   No manual restarts.

2.  **Inter-Process Communication (IPC):**

    *   `ipcMain` and `ipcRenderer` *only*.
    *   `preload.ts`: Expose *specific*, *typed* functionposure.
    *   Strongly-typed API: Create a `backend` object (or similar) to wrap `ipcRenderer.invoke` calls.  This object *must* be defined with clear interfaces.

3.  **Debugging:**

    *   Browser's dev tools for the renderer.
    *   VS Code's debugger for the main process (attach to the running process).

## Building and Packaging (Mandatory)

1.  **Build Process:**

    *   `vite build` (renderer).
    *   `tsc -p tsconfig-electron.json` (main).
    *   `package.json` scripts *must* orchestrate these.

2.  **Packaging:**

    *   `electron-forge` is *required*.
    *   Configuration *must* include necessary files from `dist`.

3.  **Code Signing:**

    *   Code signing is *mandatory* for producttion:** `contextIsolation: true` is *mandatory*.
*   **Sandboxing:** Sandboxing is *mandatory*.
*   **Preload Scripts:** Expose *only* the absolute minimum necessary APIs.
*   **Content Security Policy (CSP):** A strong CSP is *mandatory*.
*   **Remote Content:** Loading remote content is strictly forbidden.
*   **Regular Updates:** Automated dependency updates (e.g., Dependabot) are *required*.

## React 18 t` from `react-dom/client` for mounting.
*   Leverage React 18 features (e.g., concurrent rendering).
*   Functional components and hooks *only*. Class components are forbidden.
*   Strict component file structure (see above).

## Code Style and Linting

*   ESLint and Prettier are *mandatory*.
*   Use the provided `.eslintrc.json` (or a stricter version).
*   Consistent code style is enforced.  No deviations.

## Testing
* Unit tests are mandatory ons.
* Integration tests for critical workflows are highly recommended.
* End-to-end tests using a framework like Playwright are recommended.

## Conclusion

These best practices are *mandatory*. Adherence is critical for project success and maintainability.  Code reviews will enforce these standards.